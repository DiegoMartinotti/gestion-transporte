#!/usr/bin/env node

/**
 * Script de diagn√≥stico para probar conexi√≥n a MongoDB Atlas
 */

require('dotenv').config();
const mongoose = require('mongoose');

async function testConnection() {
    console.log('üîç Diagnosticando conexi√≥n a MongoDB Atlas...\n');
    
    // 1. Verificar variables de entorno
    console.log('1. Verificando variables de entorno:');
    const mongoURI = process.env.MONGODB_URI;
    const dbPassword = process.env.DB_PASSWORD;
    
    if (!mongoURI) {
        console.error('‚ùå MONGODB_URI no est√° definida');
        process.exit(1);
    }
    
    if (!dbPassword) {
        console.error('‚ùå DB_PASSWORD no est√° definida');
        process.exit(1);
    }
    
    console.log('   ‚úÖ Variables de entorno configuradas');
    
    // 2. Construir URI final
    const finalURI = mongoURI.replace('${DB_PASSWORD}', dbPassword);
    const safeURI = finalURI.replace(/\/\/.*@/, '//<credentials>@');
    console.log(`   üìç URI: ${safeURI}\n`);
    
    // 3. Probar conexi√≥n con diferentes timeouts
    console.log('2. Probando conexi√≥n...');
    
    const testConfigs = [
        {
            name: 'R√°pida (5s)',
            options: {
                serverSelectionTimeoutMS: 5000,
                connectTimeoutMS: 5000,
                socketTimeoutMS: 5000
            }
        },
        {
            name: 'Normal (15s)',
            options: {
                serverSelectionTimeoutMS: 15000,
                connectTimeoutMS: 15000,
                socketTimeoutMS: 15000
            }
        },
        {
            name: 'Extendida (30s)',
            options: {
                serverSelectionTimeoutMS: 30000,
                connectTimeoutMS: 30000,
                socketTimeoutMS: 30000
            }
        }
    ];
    
    for (const config of testConfigs) {
        console.log(`\n   üß™ Probando conexi√≥n ${config.name}...`);
        
        try {
            const startTime = Date.now();
            await mongoose.connect(finalURI, config.options);
            const duration = Date.now() - startTime;
            
            console.log(`   ‚úÖ Conexi√≥n exitosa en ${duration}ms`);
            
            // Probar una operaci√≥n b√°sica
            const adminDb = mongoose.connection.db.admin();
            const result = await adminDb.ping();
            console.log('   ‚úÖ Ping a la base de datos exitoso');
            
            // Listar bases de datos disponibles
            const dbList = await adminDb.listDatabases();
            console.log(`   üìä Bases de datos disponibles: ${dbList.databases.map(db => db.name).join(', ')}`);
            
            await mongoose.disconnect();
            console.log('   ‚úÖ Desconexi√≥n exitosa');
            
            console.log('\nüéâ ¬°Conexi√≥n a MongoDB Atlas funciona correctamente!');
            process.exit(0);
            
        } catch (error) {
            console.log(`   ‚ùå Fall√≥: ${error.message}`);
            
            if (error.name === 'MongoNetworkTimeoutError') {
                console.log('      üîç Esto sugiere problemas de conectividad de red');
            } else if (error.name === 'MongoServerSelectionError') {
                console.log('      üîç No se pudo seleccionar un servidor MongoDB');
            } else if (error.name === 'MongoParseError') {
                console.log('      üîç Error en el formato de la URI de conexi√≥n');
            }
            
            // Intentar desconectar si hay conexi√≥n parcial
            try {
                await mongoose.disconnect();
            } catch (disconnectError) {
                // Ignorar errores de desconexi√≥n
            }
        }
    }
    
    console.log('\n‚ùå Todas las pruebas de conexi√≥n fallaron');
    console.log('\nüí° Posibles soluciones:');
    console.log('   1. Verificar que tu IP est√© en el Access List de MongoDB Atlas');
    console.log('   2. Confirmar credenciales (usuario/password)');
    console.log('   3. Revisar configuraci√≥n de firewall/proxy');
    console.log('   4. Verificar estado del cluster en MongoDB Atlas');
    console.log('   5. Probar desde otra conexi√≥n de red');
    
    process.exit(1);
}

// Manejar interrupciones
process.on('SIGINT', async () => {
    console.log('\nüõë Prueba interrumpida por el usuario');
    try {
        await mongoose.disconnect();
    } catch (error) {
        // Ignorar errores de desconexi√≥n
    }
    process.exit(0);
});

// Ejecutar diagn√≥stico
testConnection().catch(error => {
    console.error('\nüí• Error inesperado:', error);
    process.exit(1);
});