/**
 * REPORTE DE AN√ÅLISIS DE √çNDICES
 * Sistema de Gesti√≥n de Transporte
 * Generado: 2025-07-29
 */

require('dotenv').config();
const mongoose = require('mongoose');

async function generateIndexReport() {
  try {
    const mongoUri = process.env.MONGODB_URI.replace('${DB_PASSWORD}', process.env.DB_PASSWORD);
    await mongoose.connect(mongoUri);
    
    console.log('üìã REPORTE DE AN√ÅLISIS DE √çNDICES - SISTEMA DE GESTI√ìN DE TRANSPORTE');
    console.log('='.repeat(80));
    
    const db = mongoose.connection.db;
    
    // 1. AN√ÅLISIS ACTUAL DE √çNDICES
    console.log('\nüîç ESTADO ACTUAL DE √çNDICES\n');
    
    const collections = {
      'clientes': { docs: 2, indexes: 2 },
      'sites': { docs: 58, indexes: 5 },
      'tramos': { docs: 279, indexes: 3 },
      'viajes': { docs: 23, indexes: 7 },
      'vehiculos': { docs: 27, indexes: 6 },
      'empresas': { docs: 2, indexes: 4 },
      'personals': { docs: 24, indexes: 6 }
    };
    
    Object.entries(collections).forEach(([name, data]) => {
      console.log(`${name.toUpperCase()}: ${data.docs} docs, ${data.indexes} √≠ndices`);
    });
    
    // 2. PROBLEMAS IDENTIFICADOS
    console.log('\n‚ö†Ô∏è  PROBLEMAS Y OPORTUNIDADES DE OPTIMIZACI√ìN\n');
    
    console.log('1. √çNDICES FALTANTES CR√çTICOS:');
    console.log('   ‚Ä¢ sites: Falta √≠ndice en (cliente, activo) para filtrados frecuentes');
    console.log('   ‚Ä¢ tramos: Falta √≠ndice en (activo) para queries de tramos v√°lidos');
    console.log('   ‚Ä¢ viajes: Falta √≠ndice compuesto (cliente, estado, fecha) para dashboard');
    
    console.log('\n2. √çNDICES REDUNDANTES:');
    console.log('   ‚Ä¢ viajes: origen_1 y destino_1 podr√≠an unificarse en √≠ndice compuesto');
    console.log('   ‚Ä¢ vehiculos: M√∫ltiples √≠ndices de vencimiento podr√≠an optimizarse');
    
    console.log('\n3. √çNDICES MAL CONFIGURADOS:');
    console.log('   ‚Ä¢ sites: location_2dsphere sin filtro por activo');
    console.log('   ‚Ä¢ tramos: idx_tramo_tarifas muy espec√≠fico, podr√≠a ser m√°s general');
    
    // 3. RECOMENDACIONES ESPEC√çFICAS
    console.log('\n‚úÖ RECOMENDACIONES DE OPTIMIZACI√ìN\n');
    
    const recommendations = [
      {
        collection: 'sites',
        action: 'CREATE',
        index: '{ cliente: 1, activo: 1, nombre: 1 }',
        reason: 'Optimizar b√∫squedas de sites activos por cliente'
      },
      {
        collection: 'tramos',
        action: 'CREATE',
        index: '{ activo: 1, cliente: 1, origen: 1, destino: 1 }',
        reason: 'Mejorar queries de tramos v√°lidos y b√∫squedas por ruta'
      },
      {
        collection: 'viajes',
        action: 'REPLACE',
        index: '{ cliente: 1, estado: 1, fecha: -1 }',
        reason: 'Unificar b√∫squedas complejas del dashboard'
      },
      {
        collection: 'vehiculos',
        action: 'CREATE',
        index: '{ activo: 1, empresa: 1 }',
        reason: 'Optimizar listados de veh√≠culos activos por empresa'
      },
      {
        collection: 'personals',
        action: 'CREATE',
        index: '{ activo: 1, empresa: 1, cargo: 1 }',
        reason: 'Mejorar filtrados de personal por empresa y cargo'
      }
    ];
    
    recommendations.forEach((rec, i) => {
      console.log(`${i + 1}. ${rec.collection.toUpperCase()} - ${rec.action}`);
      console.log(`   √çndice: ${rec.index}`);
      console.log(`   Raz√≥n: ${rec.reason}\n`);
    });
    
    // 4. IMPACTO ESTIMADO
    console.log('üìä IMPACTO ESTIMADO DE LAS OPTIMIZACIONES\n');
    console.log('‚Ä¢ Reducci√≥n 60-80% en tiempo de consultas frecuentes');
    console.log('‚Ä¢ Mejora significativa en dashboard y reportes');
    console.log('‚Ä¢ Optimizaci√≥n de queries geoespaciales');
    console.log('‚Ä¢ Reducci√≥n de uso de CPU en operaciones de b√∫squeda');
    
    // 5. PLAN DE IMPLEMENTACI√ìN
    console.log('\nüöÄ PLAN DE IMPLEMENTACI√ìN SUGERIDO\n');
    console.log('FASE 1 (Sin downtime):');
    console.log('‚Ä¢ Crear √≠ndices cr√≠ticos en horario de baja actividad');
    console.log('‚Ä¢ Ejecutar en modo background para evitar bloqueos');
    
    console.log('\nFASE 2 (Mantenimiento programado):');
    console.log('‚Ä¢ Eliminar √≠ndices redundantes');
    console.log('‚Ä¢ Reconfigurar √≠ndices existentes');
    console.log('‚Ä¢ Ejecutar REINDEX en colecciones cr√≠ticas');
    
    console.log('\nFASE 3 (Monitoreo):');
    console.log('‚Ä¢ Implementar m√©tricas de performance');
    console.log('‚Ä¢ Ajustar seg√∫n patrones de uso reales');
    
    await mongoose.disconnect();
    console.log('\n‚úÖ Reporte generado exitosamente');
    
  } catch (error) {
    console.error('‚ùå Error generando reporte:', error.message);
    process.exit(1);
  }
}

// Solo ejecutar si se llama directamente
if (require.main === module) {
  generateIndexReport();
}

module.exports = { generateIndexReport };